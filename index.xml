<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bart de Goede</title>
    <link>/</link>
    <description>Recent content on Bart de Goede</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 24 Mar 2021 20:00:12 -0700</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Building a full-text search engine in 150 lines of Python code</title>
      <link>/building-a-full-text-search-engine-150-lines-of-code/</link>
      <pubDate>Wed, 24 Mar 2021 20:00:12 -0700</pubDate>
      
      <guid>/building-a-full-text-search-engine-150-lines-of-code/</guid>
      <description>Full-text search is everywhere. From finding a book on Scribd, a movie on Netflix, toilet paper on Amazon, or anything else on the web through Google (like how to do your job as a software engineer), you&amp;rsquo;ve searched vast amounts of unstructured data multiple times today. What&amp;rsquo;s even more amazing, is that you&amp;rsquo;ve even though you searched millions (or billions) of records, you got a response in milliseconds. In this post, we are going to explore the basic components of a full-text search engine, and use them to build one that can search across millions of documents and rank them according to their relevance in milliseconds, in less than 150 lines of Python code!</description>
    </item>
    
    <item>
      <title>Use Google Cloud Text-to-Speech to create an audio version of your blog posts</title>
      <link>/use-google-cloud-text-to-speech-to-create-an-audio-version-of-your-blog-posts/</link>
      <pubDate>Tue, 29 Oct 2019 08:00:00 -0700</pubDate>
      
      <guid>/use-google-cloud-text-to-speech-to-create-an-audio-version-of-your-blog-posts/</guid>
      <description>Audio is big. Like, really big, and growing fast, to the tune of &amp;ldquo;two-thirds of the population listens to online audio&amp;rdquo; and &amp;ldquo;weekly online listeners reporting an average nearly 17 hours of listening in the last week&amp;rdquo;1. These numbers include all kinds of audio, from online radio stations, audiobooks, streaming services and podcasts (hi Spotify!). It makes sense too. Consuming audio content is easier to consume and more engaging than written content while you&amp;rsquo;re on the go, exercising, commuting or doing household chores2.</description>
    </item>
    
    <item>
      <title>Use Hugo Output Formats to generate Lunr index files for your static site search</title>
      <link>/use-hugo-output-formats-to-generate-lunr-index-files/</link>
      <pubDate>Fri, 12 Jul 2019 15:27:40 -0700</pubDate>
      
      <guid>/use-hugo-output-formats-to-generate-lunr-index-files/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;/searching-your-hugo-site-with-lunr/&#34;&gt;I&amp;rsquo;ve been using Lunr.js&lt;/a&gt; to enable some basic site search on this blog. Lunr.js requires an &lt;a href=&#34;/index.json&#34;&gt;index file&lt;/a&gt; that contains all the content you want to make available for search. In order to generate that file, I had a kind of hacky setup, depending on running a &lt;a href=&#34;https://github.com/bartdegoede/blog/blob/7eccae434335c6ab6ec5e10240dbc89884a194ad/Gruntfile.js&#34;&gt;Grunt script&lt;/a&gt; on &lt;a href=&#34;https://github.com/bartdegoede/blog/commit/335d19e81016633823ccfb6fbb2038c891182bbb#diff-60254338249f657a0a83f98258a56bfeL9&#34;&gt;every deploy&lt;/a&gt;, which introduces a dependency on node, and nobody really wants any of that for just a static HTML website.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Custom OpenSearch: search from your URL bar</title>
      <link>/tab-plus-search-from-your-url-bar-with-opensearch/</link>
      <pubDate>Wed, 21 Nov 2018 11:00:00 -0800</pubDate>
      
      <guid>/tab-plus-search-from-your-url-bar-with-opensearch/</guid>
      <description>&lt;p&gt;Almost all modern browsers enable websites to customize the built-in search feature to let the user access their search features directly, without going to your website first and finding the search input box. If your website has search functionality accessible through a basic GET request, it&amp;rsquo;s surprisingly simple to enable this for your website too.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Free SSL on Github Pages with a custom domain: Part 2 - Let&#39;s Encrypt</title>
      <link>/github-pages-and-lets-encrypt/</link>
      <pubDate>Wed, 02 May 2018 22:34:06 +0200</pubDate>
      
      <guid>/github-pages-and-lets-encrypt/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://pages.github.com/&#34;&gt;GitHub Pages&lt;/a&gt; has just become even more awesome. Since yesterday&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;, GitHub Pages &lt;a href=&#34;https://blog.github.com/2018-05-01-github-pages-custom-domains-https/&#34;&gt;supports HTTPS for custom domains&lt;/a&gt;. And yes, it is still free!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Free SSL with a custom domain on GitHub Pages</title>
      <link>/free-ssl-on-github-pages-with-a-custom-domain/</link>
      <pubDate>Wed, 28 Mar 2018 23:55:40 +0200</pubDate>
      
      <guid>/free-ssl-on-github-pages-with-a-custom-domain/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://pages.github.com/&#34;&gt;GitHub Pages&lt;/a&gt; is pretty awesome. It lets you push a bunch of static HTML (and/or CSS and Javascript) to a GitHub repository, and they&amp;rsquo;ll host and serve it for you. For free!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Bloom filters, using bit arrays for recommendations, caches and Bitcoin</title>
      <link>/bloom-filters-bit-arrays-recommendations-caches-bitcoin/</link>
      <pubDate>Fri, 23 Mar 2018 15:00:00 +0100</pubDate>
      
      <guid>/bloom-filters-bit-arrays-recommendations-caches-bitcoin/</guid>
      <description>&lt;p&gt;Bloom filters are cool. In my experience, it&amp;rsquo;s a somewhat underestimated data structure that sounds more complex than it actually is. In this post I&amp;rsquo;ll go over what they are, how they work (I&amp;rsquo;ve hacked together an &lt;a href=&#34;#interactive_example&#34;&gt;interactive example&lt;/a&gt; to help visualise what happens behind the scenes) and go over some of their usecases in the wild.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Searching your Hugo site with Lunr</title>
      <link>/searching-your-hugo-site-with-lunr/</link>
      <pubDate>Sun, 04 Mar 2018 23:38:44 +0100</pubDate>
      
      <guid>/searching-your-hugo-site-with-lunr/</guid>
      <description>&lt;p&gt;Like many software engineers, I figured I needed a blog of sorts, because it would give me a place for my own notes on &amp;ldquo;How To Do Thingsâ„¢&amp;rdquo;, let me have a URL to give people, and share my ramblings about Life, the Universe and Everything Else with whoever wants to read them.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>About</title>
      <link>/about/</link>
      <pubDate>Wed, 21 Feb 2018 22:40:33 +0100</pubDate>
      
      <guid>/about/</guid>
      <description>Hi! My name is Bart de Goede, and I write software for a living. I live in New York City and I&amp;rsquo;m head of search at OnFrontiers where we help organizations understand the knowledge and expertise their employees accrue. Before that, I was a software engineer at Instacart on the growth team. Before that, I was at Scribd on the search team and then on the web foundations team, helping you find the things you want to read.</description>
    </item>
    
  </channel>
</rss>
