<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Bloom Filter on Bart de Goede</title><link>https://bart.degoe.de/categories/bloom-filter/</link><description>Recent content in Bloom Filter on Bart de Goede</description><image><title>Bart de Goede</title><url>https://www.gravatar.com/avatar/af61db828941976309aaa8d7d76554fb</url><link>https://www.gravatar.com/avatar/af61db828941976309aaa8d7d76554fb</link></image><generator>Hugo -- 0.147.8</generator><language>en-us</language><lastBuildDate>Fri, 23 Mar 2018 15:00:00 +0100</lastBuildDate><atom:link href="https://bart.degoe.de/categories/bloom-filter/index.xml" rel="self" type="application/rss+xml"/><item><title>Bloom filters, using bit arrays for recommendations, caches and Bitcoin</title><link>https://bart.degoe.de/bloom-filters-bit-arrays-recommendations-caches-bitcoin/</link><pubDate>Fri, 23 Mar 2018 15:00:00 +0100</pubDate><guid>https://bart.degoe.de/bloom-filters-bit-arrays-recommendations-caches-bitcoin/</guid><description>&lt;p>Bloom filters are cool. In my experience, it&amp;rsquo;s a somewhat underestimated data structure that sounds more complex than it actually is. In this post I&amp;rsquo;ll go over what they are, how they work (I&amp;rsquo;ve hacked together an &lt;a href="#interactive_example">interactive example&lt;/a> to help visualise what happens behind the scenes) and go over some of their usecases in the wild.&lt;/p></description></item></channel></rss>