<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python on Bart de Goede</title>
    <link>/categories/python/</link>
    <description>Recent content in python on Bart de Goede</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 24 Mar 2021 20:00:12 -0700</lastBuildDate><atom:link href="/categories/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Building a full-text search engine in 150 lines of Python code</title>
      <link>/building-a-full-text-search-engine-150-lines-of-code/</link>
      <pubDate>Wed, 24 Mar 2021 20:00:12 -0700</pubDate>
      
      <guid>/building-a-full-text-search-engine-150-lines-of-code/</guid>
      <description>Full-text search is everywhere. From finding a book on Scribd, a movie on Netflix, toilet paper on Amazon, or anything else on the web through Google (like how to do your job as a software engineer), you&amp;rsquo;ve searched vast amounts of unstructured data multiple times today. What&amp;rsquo;s even more amazing, is that you&amp;rsquo;ve even though you searched millions (or billions) of records, you got a response in milliseconds. In this post, we are going to explore the basic components of a full-text search engine, and use them to build one that can search across millions of documents and rank them according to their relevance in milliseconds, in less than 150 lines of Python code!</description>
    </item>
    
    <item>
      <title>Bloom filters, using bit arrays for recommendations, caches and Bitcoin</title>
      <link>/bloom-filters-bit-arrays-recommendations-caches-bitcoin/</link>
      <pubDate>Fri, 23 Mar 2018 15:00:00 +0100</pubDate>
      
      <guid>/bloom-filters-bit-arrays-recommendations-caches-bitcoin/</guid>
      <description>&lt;p&gt;Bloom filters are cool. In my experience, it&amp;rsquo;s a somewhat underestimated data structure that sounds more complex than it actually is. In this post I&amp;rsquo;ll go over what they are, how they work (I&amp;rsquo;ve hacked together an &lt;a href=&#34;#interactive_example&#34;&gt;interactive example&lt;/a&gt; to help visualise what happens behind the scenes) and go over some of their usecases in the wild.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
