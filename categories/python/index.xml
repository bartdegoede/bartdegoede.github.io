<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Python on Bart de Goede</title>
    <link>https://bart.degoe.de/categories/python/</link>
    <description>Recent content in Python on Bart de Goede</description>
    <image>
      <title>Bart de Goede</title>
      <url>https://www.gravatar.com/avatar/af61db828941976309aaa8d7d76554fb</url>
      <link>https://www.gravatar.com/avatar/af61db828941976309aaa8d7d76554fb</link>
    </image>
    <generator>Hugo -- 0.147.8</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 24 Mar 2021 20:00:12 -0700</lastBuildDate>
    <atom:link href="https://bart.degoe.de/categories/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Building a full-text search engine in 150 lines of Python code</title>
      <link>https://bart.degoe.de/building-a-full-text-search-engine-150-lines-of-code/</link>
      <pubDate>Wed, 24 Mar 2021 20:00:12 -0700</pubDate>
      <guid>https://bart.degoe.de/building-a-full-text-search-engine-150-lines-of-code/</guid>
      <description>Full-text search is everywhere. From finding a book on Scribd, a movie on Netflix, toilet paper on Amazon, or anything else on the web through Google (like [how to do your job as a software engineer](https://localghost.dev/2019/09/everything-i-googled-in-a-week-as-a-professional-software-engineer/)), you&amp;#39;ve searched vast amounts of unstructured data multiple times today. What&amp;#39;s even more amazing, is that you&amp;#39;ve even though you searched millions (or [billions](https://www.worldwidewebsize.com/)) of records, you got a response in milliseconds. In this post, we are going to build a basic full-text search engine that can search across millions of documents and rank them according to their relevance to the query in milliseconds, in less than 150 lines of code!</description>
    </item>
    <item>
      <title>Bloom filters, using bit arrays for recommendations, caches and Bitcoin</title>
      <link>https://bart.degoe.de/bloom-filters-bit-arrays-recommendations-caches-bitcoin/</link>
      <pubDate>Fri, 23 Mar 2018 15:00:00 +0100</pubDate>
      <guid>https://bart.degoe.de/bloom-filters-bit-arrays-recommendations-caches-bitcoin/</guid>
      <description>&lt;p&gt;Bloom filters are cool. In my experience, it&amp;rsquo;s a somewhat underestimated data structure that sounds more complex than it actually is. In this post I&amp;rsquo;ll go over what they are, how they work (I&amp;rsquo;ve hacked together an &lt;a href=&#34;#interactive_example&#34;&gt;interactive example&lt;/a&gt; to help visualise what happens behind the scenes) and go over some of their usecases in the wild.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
